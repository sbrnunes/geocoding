<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/batch 
					    http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
						http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />
	
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

 	<!-- 
 		PROCESS GEOGRAPHICAL AND INSURANCE DATA JOB
 	 -->
	<batch:job id="readGeoInsuranceData" >
		<batch:step id="readGeoInsuranceData_step1" >			
			<batch:tasklet transaction-manager="transactionManager" >
				<batch:chunk 
					reader="csvFileReader" 
					processor="geographicalDataProcessor"
					writer="jpaItemWriter" 
					commit-interval="1" />
			</batch:tasklet>
		</batch:step>
	</batch:job> 
 	
 	<bean id="csvFileReader" class="org.springframework.batch.item.file.FlatFileItemReader">
 		<property name="resource" value="file:${csv.input.file}"/>
 		<property name="linesToSkip" value="1"/>
 		<property name="lineMapper">
 			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
 				<property name="lineTokenizer">
 					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
 						<property name="delimiter" value=","/>
 						<property name="names">
 							<value>policyNumber,account,address1,address2,region,postcodeZip,country,inceptionDate,expiryDate,riskNumber,totalSumInsured,floodRisk,landSlideRisk,earthquakeRisk,onSiteSecurity,fireAlarm,intruderDetectionAlarm</value>
 						</property>
 					</bean>
 				</property>
 				<property name="fieldSetMapper">
 					<bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
 						<property name="targetType" value="mapflow.sample.app.batch.model.GeographicalData" />
 					</bean>
 				</property>
 			</bean>
 		</property>
 	</bean>
 	
 	<bean id="geographicalDataProcessor" class="mapflow.sample.app.batch.processor.GeographicalDataItemProcessor" />
 	
 	<bean id="jpaItemWriter" class="org.springframework.batch.item.database.JpaItemWriter">
 		<property name="entityManagerFactory" ref="entityManagerFactory" />
 	</bean>
 	
 	<!-- 
 		CALCULATE TOTAL INSURANCE BY POLICY NUMBER DATA JOB
 	 -->
	<batch:job id="calculateInsuranceDataByPolicyNumber" >
		<batch:step id="calculateInsuranceDataByPolicyNumber_step1" >			
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk 
					reader="totalInsuredByPolicyNumberReader" 
					writer="totalInsuredByPolicyNumberCsvFileWriter"
					commit-interval="1" />
			</batch:tasklet>
		</batch:step>
	</batch:job> 
	
 	<bean id="totalInsuredByPolicyNumberReader" class="org.springframework.batch.item.database.JpaPagingItemReader">
	    <property name="entityManagerFactory" ref="entityManagerFactory"/>
	    <property name="queryString">
	    	<value>
	    	 	select 
	    	 		new mapflow.sample.app.batch.model.TotalInsuredByPolicyAccount(gd.policyNumber, sum(gd.totalSumInsured)) 
	    	 	from GeographicalData gd 
	    	 	group by gd.policyNumber
	    	 </value>
	    </property>
	</bean>
	
	<bean id="totalInsuredByPolicyNumberCsvFileWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
	    <property name="resource" value="file:${csv.output.file.totalInsuredByPolicyNumber}" />
	    <property name="headerCallback">
	    	<bean class="mapflow.sample.app.batch.callback.TotalInsuredByPolicyNumberHeaderCallback" />
	    </property>
	    <property name="lineAggregator">
	        <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
            <property name="delimiter" value=","/>
            <property name="fieldExtractor">
                <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                    <property name="names" value="policyNumber,sumTotalSumInsured"/>
                </bean>
            </property>
        </bean>
	    </property>
	</bean>
	
	<!-- 
 		CALCULATE TOTAL INSURANCE DATA JOB
 	 -->
	<batch:job id="calculateTotalInsuredData" >
		<batch:step id="calculateTotalInsuredData_step1" >			
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk 
					reader="totalInsuredDataReader" 
					writer="totalInsuredCsvFileWriter"
					commit-interval="1" />
			</batch:tasklet>
		</batch:step>
	</batch:job> 
	
 	<bean id="totalInsuredDataReader" class="org.springframework.batch.item.database.JpaPagingItemReader" scope="step">
	    <property name="entityManagerFactory" ref="entityManagerFactory"/>
	    <property name="queryString">
	    	<value>
	    		<![CDATA[
		    	 	select 
		    	 		new mapflow.sample.app.batch.model.TotalInsured (
		    	 			#{jobParameters['lat1']},
		    	 			#{jobParameters['lon1']},
		    	 			#{jobParameters['lat2']},
		    	 			#{jobParameters['lon2']},
		    	 			sum(gd.totalSumInsured))
		    	 	from GeographicalData gd 
		    	 	where
						gd.latitude <= #{jobParameters['lat1']} and
						gd.latitude >= #{jobParameters['lat2']} and 
						gd.longitude >= #{jobParameters['lon1']} and 
						gd.longitude <= #{jobParameters['lon2']}
				]]>
	    	 </value>
	    </property>
	</bean>
	
	<bean id="totalInsuredCsvFileWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
	    <property name="resource" value="file:${csv.output.file.totalInsured}" />
	    <property name="headerCallback">
	    	<bean class="mapflow.sample.app.batch.callback.TotalInsuredHeaderCallback" />
	    </property>
	    <property name="lineAggregator">
	        <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
            <property name="delimiter" value=","/>
            <property name="fieldExtractor">
                <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
                    <property name="names" value="latitude1,longitude1,latitude2,longitude2,totalSumInsured"/>
                </bean>
            </property>
        </bean>
	    </property>
	</bean>
</beans>
